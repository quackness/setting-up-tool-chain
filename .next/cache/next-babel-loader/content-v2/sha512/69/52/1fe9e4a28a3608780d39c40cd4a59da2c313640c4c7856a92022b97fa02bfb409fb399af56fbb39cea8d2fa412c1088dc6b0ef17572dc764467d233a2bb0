{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"/Users/karolinadubaj/lighthouse/personal_projects/sfh/React/clip2-Setting-Up-Toolchain/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/karolinadubaj/lighthouse/personal_projects/sfh/React/clip2-Setting-Up-Toolchain/pages/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\n\nvar InputElement = function InputElement() {\n  _s();\n\n  //step 2 use useState\n  // const results = useState(\"\");\n  // const inputText = results[0];//data model\n  // const setInputText = results[1];//updated value\n  //step 2 destructured below\n  var _useState = useState(\"\"),\n      inputText = _useState[0],\n      setInputText = _useState[1]; //create history, start with state\n\n\n  var _useState2 = useState([]),\n      historyList = _useState2[0],\n      setHistoryList = _useState2[1];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      //step 1 input supports onChange \n      //step 3 add setInputText(e.target.value)\n      onChange: function onChange(e) {\n        setInputText(e.target.value); //spread and append with a new entry\n\n        setHistoryList([].concat(_toConsumableArray(historyList), [e.target.value]));\n      },\n      placeholder: \"Enter some text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 39\n    }, _this), inputText, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }, _this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: historyList.map(function (rec) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: rec\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 16\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(InputElement, \"Bk0Id2fWlKN3EwjLkrmfJt96ZA4=\");\n\n_c = InputElement;\nexport default InputElement;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputElement\");","map":{"version":3,"sources":["/Users/karolinadubaj/lighthouse/personal_projects/sfh/React/clip2-Setting-Up-Toolchain/pages/index.js"],"names":["React","useState","InputElement","inputText","setInputText","historyList","setHistoryList","e","target","value","map","rec"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA;;AACzB;AACA;AACA;AACA;AACA;AALyB,kBAMSD,QAAQ,CAAC,EAAD,CANjB;AAAA,MAMlBE,SANkB;AAAA,MAMPC,YANO,iBAOzB;;;AAPyB,mBAQaH,QAAQ,CAAC,EAAD,CARrB;AAAA,MAQlBI,WARkB;AAAA,MAQLC,cARK;;AAWzB,sBAAO;AAAA,4BACL;AACE;AACA;AACA,MAAA,QAAQ,EAAE,kBAACC,CAAD,EAAO;AACfH,QAAAA,YAAY,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ,CADe,CAEf;;AACAH,QAAAA,cAAc,8BAAKD,WAAL,IAAkBE,CAAC,CAACC,MAAF,CAASC,KAA3B,GAAd;AACD,OAPH;AAQE,MAAA,WAAW,EAAC;AARd;AAAA;AAAA;AAAA;AAAA,aADK,eAS6B;AAAA;AAAA;AAAA;AAAA,aAT7B,EAWJN,SAXI,eAaL;AAAA;AAAA;AAAA;AAAA,aAbK,eAaC;AAAA;AAAA;AAAA;AAAA,aAbD,eAcL;AAAA,gBACGE,WAAW,CAACK,GAAZ,CAAgB,UAAAC,GAAG,EAAI;AACtB,4BAAO;AAAA,oBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,iBAAP;AACD,OAFA;AADH;AAAA;AAAA;AAAA;AAAA,aAdK;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAsBD,CAjCD;;GAAMT,Y;;KAAAA,Y;AAmCN,eAAeA,YAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst InputElement = () => {\n  //step 2 use useState\n  // const results = useState(\"\");\n  // const inputText = results[0];//data model\n  // const setInputText = results[1];//updated value\n  //step 2 destructured below\n  const [inputText, setInputText] = useState(\"\");\n  //create history, start with state\n  const [historyList, setHistoryList] = useState([]);\n\n\n  return <div>\n    <input\n      //step 1 input supports onChange \n      //step 3 add setInputText(e.target.value)\n      onChange={(e) => {\n        setInputText(e.target.value);\n        //spread and append with a new entry\n        setHistoryList([...historyList, e.target.value])\n      }}\n      placeholder=\"Enter some text\" /><br />\n    {/* step 4 add inputText */}\n    {inputText}\n    {/* output history */}\n    <hr /><br />\n    <ul>\n      {historyList.map(rec => {\n        return <div>{rec}</div>\n      })}\n    </ul>\n\n\n  </div>\n};\n\nexport default InputElement;"]},"metadata":{},"sourceType":"module"}