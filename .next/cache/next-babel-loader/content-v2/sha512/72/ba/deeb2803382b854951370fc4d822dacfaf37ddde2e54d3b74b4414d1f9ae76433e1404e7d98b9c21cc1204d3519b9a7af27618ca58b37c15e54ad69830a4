{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/karolinadubaj/lighthouse/personal_projects/sfh/React/clip2-Setting-Up-Toolchain/src/ImageToggleOnScroll.js\";\nimport React, { useRef, useEffect, useState } from 'react';\n\nconst ImageToggleOnScroll = ({\n  primaryImg,\n  secondaryImg\n}) => {\n  const imageRef = useRef(null);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n\n  const isInView = () => {\n    const rect = imageRef.current.getBoundingClientRect();\n    return rect.top >= 0 && rect.bottom <= window.innerHeight;\n  };\n\n  const {\n    0: inView,\n    1: setInView\n  } = useState(false);\n  useEffect(() => {\n    // setInView(true);\n    setInView(isInView());\n    window.addEventListener(\"scroll\", scrollHandler);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, []);\n\n  const scrollHandler = () => {\n    setInView(isInView());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["/Users/karolinadubaj/lighthouse/personal_projects/sfh/React/clip2-Setting-Up-Toolchain/src/ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageToggleOnScroll","primaryImg","secondaryImg","imageRef","isLoading","setIsLoading","isInView","rect","current","getBoundingClientRect","top","bottom","window","innerHeight","inView","setInView","addEventListener","scrollHandler","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAGA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAkC;AAC5D,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM;AAAA,OAACO,SAAD;AAAA,OAAYC;AAAZ,MAA4BN,QAAQ,CAAC,IAAD,CAA1C;;AAEA,QAAMO,QAAQ,GAAG,MAAM;AACrB,UAAMC,IAAI,GAAGJ,QAAQ,CAACK,OAAT,CAAiBC,qBAAjB,EAAb;AACA,WAAOF,IAAI,CAACG,GAAL,IAAY,CAAZ,IAAiBH,IAAI,CAACI,MAAL,IAAeC,MAAM,CAACC,WAA9C;AACD,GAHD;;AAKA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBhB,QAAQ,CAAC,KAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACAiB,IAAAA,SAAS,CAACT,QAAQ,EAAT,CAAT;AACAM,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACA,WAAO,MAAM;AACXL,MAAAA,MAAM,CAACM,mBAAP,CAA2B,QAA3B,EAAqCD,aAArC;AACD,KAFD;AAGD,GAPQ,EAON,EAPM,CAAT;;AASA,QAAMA,aAAa,GAAG,MAAM;AAC1BF,IAAAA,SAAS,CAACT,QAAQ,EAAT,CAAT;AACD,GAFD;;AAGA,sBACE;AACE,IAAA,GAAG,EAAEQ,MAAM,GAAGZ,YAAH,GAAkBD,UAD/B;AAEE,IAAA,GAAG,EAAC,EAFN;AAGE,IAAA,GAAG,EAAEE;AAHP;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA9BD;;AAgCA,eAAeH,mBAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\n\n\nconst ImageToggleOnScroll = ({ primaryImg, secondaryImg }) => {\n  const imageRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const isInView = () => {\n    const rect = imageRef.current.getBoundingClientRect();\n    return rect.top >= 0 && rect.bottom <= window.innerHeight;\n  };\n\n  const [inView, setInView] = useState(false);\n\n  useEffect(() => {\n    // setInView(true);\n    setInView(isInView());\n    window.addEventListener(\"scroll\", scrollHandler);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, []);\n\n  const scrollHandler = () => {\n    setInView(isInView());\n  };\n  return (\n    <img\n      src={inView ? secondaryImg : primaryImg}\n      alt=\"\"\n      ref={imageRef}\n    />\n  );\n}\n\nexport default ImageToggleOnScroll;\n"]},"metadata":{},"sourceType":"module"}